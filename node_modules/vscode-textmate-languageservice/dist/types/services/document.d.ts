import * as vscode from 'vscode';
import { Disposable } from '../util/dispose';
import type { ConfigData } from '../config';
export interface LiteTextLine {
    text: string;
}
export interface LiteTextDocument {
    readonly uri: vscode.Uri;
    readonly version: number;
    readonly lineCount: number;
    readonly languageId: string;
    lineAt(line: number): LiteTextLine;
    getText(): string;
}
export interface DocumentServiceInterface {
    readonly onDidChangeDocument: vscode.Event<LiteTextDocument>;
    readonly onDidCreateDocument: vscode.Event<LiteTextDocument>;
    readonly onDidDeleteDocument: vscode.Event<vscode.Uri>;
    getAllDocuments(): Thenable<Iterable<LiteTextDocument>>;
    getDocument(resource: vscode.Uri): Thenable<LiteTextDocument | undefined>;
}
export declare class DocumentService extends Disposable implements DocumentServiceInterface {
    private _languageId;
    private _config;
    private readonly _onDidChangeDocumentEmitter;
    private readonly _onDidCreateDocumentEmitter;
    private readonly _onDidDeleteDocumentEmitter;
    private _watcher;
    constructor(_languageId: string, _config: ConfigData);
    get onDidChangeDocument(): vscode.Event<LiteTextDocument>;
    get onDidCreateDocument(): vscode.Event<LiteTextDocument>;
    get onDidDeleteDocument(): vscode.Event<vscode.Uri>;
    getAllDocuments(): Promise<LiteTextDocument[]>;
    getDocument(resource: vscode.Uri): Promise<LiteTextDocument>;
    private ensureWatcher;
}
