import * as vscode from 'vscode';
import type { PartialDeep, JsonObject, PackageJson } from 'type-fest';
type PartialJsonObject = PartialDeep<JsonObject>;
export interface GrammarLanguageDefinition {
    language: string;
    scopeName: string;
    path: string;
    embeddedLanguages?: {
        [scopeName: string]: string;
    };
}
export interface GrammarInjectionContribution {
    scopeName: string;
    path: string;
    injectTo: string[];
}
export type GrammarDefinition = GrammarLanguageDefinition | GrammarInjectionContribution;
export declare function isGrammarLanguageDefinition(g: GrammarDefinition): g is GrammarLanguageDefinition;
export interface LanguageDefinition {
    aliases?: string[];
    configuration?: string;
    extensions?: string[];
    filenames?: string[];
    firstLine?: string;
    icon?: string | {
        light: string;
        dark: string;
    };
    id: string;
    mimetypes?: string[];
}
export type LanguageData = LanguageDefinition[];
export type GrammarData = GrammarLanguageDefinition[];
export interface ExtensionContributions extends PartialJsonObject {
    languages?: PartialJsonObject & LanguageData;
    grammars?: PartialJsonObject & GrammarData;
}
export interface ConfigurationPaths {
    [languageId: string]: string;
}
export interface ExtensionManifest extends PackageJson {
    enabledApiProposals?: string[];
    contributes?: ExtensionContributions;
    /** Mapping from language ID to config path. Default: `./textmate-configuration.json`. */
    'textmate-languageservices'?: ConfigurationPaths;
    /** Ersatz extension contributions - a service wiring to any language grammars. */
    'textmate-languageservice-contributes'?: ExtensionContributions;
}
export declare const contributionKeys: ExtensionManifestContributionKey[];
export type ExtensionManifestContributionKey = 'textmate-languageservice-contributes' | 'contributes';
export type ExtensionData = Record<string, vscode.Extension<unknown> | undefined>;
export declare const plaintextLanguageDefinition: LanguageDefinition;
export declare const plaintextGrammarDefinition: {
    language: string;
    path: string;
    scopeName: string;
};
export declare const plaintextLanguageConfiguration: vscode.LanguageConfiguration;
export declare class ContributorData {
    private _languages;
    private _grammars;
    private _sources;
    constructor(context?: vscode.ExtensionContext);
    get languages(): LanguageData;
    get grammars(): GrammarData;
    get sources(): Record<"languages" | "grammars", ExtensionData>;
    findLanguageByExtension(fileExtension: string): string;
    findLanguageByFilename(fileLabel: string): string;
    findGrammarScopeNameFromFilename(fileLabel: string): string;
    findLanguageIdFromScopeName(scopeName: string): string;
    getLanguageDefinitionFromId(languageId: string): LanguageDefinition;
    getLanguageDefinitionFromFilename(filename: string): LanguageDefinition;
    getGrammarDefinitionFromLanguageId(languageId: string): GrammarLanguageDefinition;
    getExtensionFromLanguageId(languageId: string): vscode.Extension<unknown> | undefined;
    getExtensionFromScopeName(scopeName: string): vscode.Extension<unknown>;
    getLanguageConfigurationFromLanguageId(languageId: string): Promise<vscode.LanguageConfiguration>;
}
export {};
