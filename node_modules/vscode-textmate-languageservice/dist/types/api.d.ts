import * as vscode from 'vscode';
import type { LiteTextDocument } from './services/document';
import type { TextmateToken } from './services/tokenizer';
import type { GrammarLanguageDefinition, LanguageDefinition } from './util/contributes';
/**
 * Get token scope information at a specific position (caret line and character number).
 * @param {LiteTextDocument} document Document to be tokenized.
 * @param {vscode.Position} position Zero-indexed caret position of token in document.
 * @returns {Promise<TextmateToken>} Promise resolving to token data for scope selected by caret position.
 */
export declare function getScopeInformationAtPosition(document: LiteTextDocument, position: vscode.Position): Promise<TextmateToken>;
/**
 * VS Code compatible performant API for token information at a caret position.
 * @param {LiteTextDocument} document Document to be tokenized.
 * @param {vscode.Position} position Zero-indexed caret position of token in document.
 * @returns {Promise<vscode.TokenInformation>} Promise resolving to token data compatible with VS Code.
 */
export declare function getTokenInformationAtPosition(document: LiteTextDocument, position: vscode.Position): Promise<vscode.TokenInformation>;
/**
 * Get matching scope range of the Textmate token intersecting a caret position.
 * @param {LiteTextDocument} document Document to be tokenized.
 * @param {vscode.Position} position Zero-indexed caret position to intersect with.
 * @returns {Promise<vscode.Range>} Promise resolving to character and line number of the range.
 */
export declare function getScopeRangeAtPosition(document: LiteTextDocument, position: vscode.Position): Promise<vscode.Range>;
/**
 * Get the active language definition point of a language mode identifier.
 * @param {string} languageId Language ID as shown in brackets in "Change Language Mode" panel.
 * @returns {LanguageDefinition} Language contribution as configured in source VS Code extension.
 */
export declare function getLanguageContribution(languageId: string): LanguageDefinition;
/**
 * Get the active language definition point of a language mode identifier.
 * @param {string} languageId Language identifier, shown in brackets in "Change Language Mode" panel.
 * @returns {GrammarLanguageDefinition} Grammar contribution as configured in source VS Code extension.
 */
export declare function getGrammarContribution(languageId: string): GrammarLanguageDefinition;
/**
 * Get the active language point of a language mode identifier.
 * @param {string} languageId Language ID as shown in brackets in "Change Language Mode" panel.
 * @returns {LanguageDefinition} Language contribution as configured in source VS Code extension.
 */
export declare function getLanguageConfiguration(languageId: string): Promise<vscode.LanguageConfiguration>;
/**
 * Get the VS Code Extension API entry of the extension that contributed a la nguage mode identifier.
 * @param {string} languageId Language identifier, shown in brackets in "Change Language Mode" panel.
 * @returns {vscode.Extension} Extension API instance that contributed the language.
 */
export declare function getContributorExtension(languageId: string): vscode.Extension<unknown> | void;
